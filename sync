#! /usr/bin/env python3

import threading
import time


from lib.pg_exec import PgExec
from lib.remote_sync import FileUploader, Pinger
from lib.watcher import Watcher
from lib.attendance import read_attendance_id, USER_ID_FILEPATH


OUTPUT_LOCK = threading.Lock()

# These names should match the folder names in exercises and db_init
DATABASE_NAMES = [
    'album_sales',
]


def run_sync():
    file_uploader = FileUploader(output_lock=OUTPUT_LOCK)
    pinger = Pinger()
    watcher = Watcher(file_uploader, base_path="exercises", output_lock=OUTPUT_LOCK)
    watcher.poll_for_changes(loop_callback=pinger.ping)


def pg_update():
    time.sleep(1)  # Give time for the database service to start
    pg_executor = PgExec(DATABASE_NAMES, output_lock=OUTPUT_LOCK)
    watcher = Watcher(pg_executor, base_path="exercises")
    watcher.poll_for_changes()


def skiller_whale_sync():
    print("  _____ _    _ _ _            __          ___           _      ")
    print(" / ____| |  (_) | |           \\ \\        / / |         | |     ")
    print("| (___ | | ___| | | ___ _ __   \\ \\  /\\  / /| |__   __ _| | ___ ")
    print(" \\___ \\| |/ / | | |/ _ \\ '__|   \\ \\/  \\/ / | '_ \\ / _` | |/ _ \\")
    print(" ____) |   <| | | |  __/ |       \\  /\\  /  | | | | (_| | |  __/")
    print("|_____/|_|\\_\\_|_|_|\\___|_|        \\/  \\/   |_| |_|\\__,_|_|\\___| ")
    print("")
    print("")
    print(f'We\'re going to start watching this directory for changes so that the trainer can see your progress.')
    print(f'Your attendance id is currently set to: {read_attendance_id()}')
    print(f'If this is not correct, you can update it in the file {USER_ID_FILEPATH}\n')

    sync_thread = threading.Thread(target=run_sync)
    sync_thread.start()

    pg_update()


if __name__ == "__main__":
    skiller_whale_sync()
